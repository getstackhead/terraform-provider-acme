// Code generated by go-bindata.
// sources:
// templates/dns-provider-doc-template.tmpl
// templates/dns-provider-go-template.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDnsProviderDocTemplateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x61\x8b\xdb\x46\x10\xfd\xbe\xbf\xe2\xe1\x3b\x68\x62\x2c\xf9\xbb\x21\x05\xe3\x5e\x20\x90\x86\x23\x97\xf6\x8b\x31\xa7\xb5\x34\x92\x96\x5b\xed\x8a\xdd\x95\x2f\x46\xe8\xbf\x97\x91\x4f\xd2\xc9\x4d\x2f\xa5\xd0\x4f\xb6\x34\xb3\x33\xf3\xde\xbc\xb7\x8a\xa2\x48\xd4\xb2\xa0\xc7\xa0\x82\xa6\x0d\x16\x6d\x1b\xef\x6c\x46\x5d\xb7\x10\xbe\x39\xa6\x32\x50\x61\xdd\x79\x83\xc5\x6f\x5f\x1e\x70\xef\xec\x49\x65\xe4\xfc\x42\xf0\x41\x11\xfd\x8a\x6f\x25\x21\xb7\x5a\xdb\x67\x65\x0a\x64\x36\x6d\x2a\x32\x41\x06\x65\x0d\x94\x87\x6c\x82\x8d\x0a\x32\xe4\x64\xa0\x0c\xb9\xb3\x15\x42\x49\xd8\xee\x7e\xbf\x13\xf5\x4b\xb9\x5f\x3c\xb6\xf7\x9f\xa0\xd5\xd1\x49\x77\xc6\x5e\x53\x61\x0f\xef\xca\x10\x6a\xbf\x59\xaf\x0b\x1b\xc9\xb4\xa2\xb8\x50\xa1\x6c\x8e\xb1\xb2\x6b\x8e\xaf\xdf\xc7\xc0\x83\xad\x48\x78\x4a\xb9\x9b\x47\x25\xcf\x70\x94\x93\x43\xb0\xe0\x1c\x64\xca\x51\x1a\xf4\x19\x11\x94\x41\x65\x7d\x40\x2a\x3d\xf9\x15\xcf\xe0\x09\xc3\x51\x21\xeb\x5a\x9f\xf9\x18\xcf\xf6\x8d\x9c\x93\xb9\x75\x15\x86\x01\x21\x3d\x9e\x49\xeb\x58\x88\x1b\xb4\x6d\xfc\x45\x56\xd4\x75\x60\x4a\x76\xa5\xd4\x9a\x4c\x41\x23\x39\x42\x30\x27\xc9\x48\x64\xd2\xe7\xa5\x63\xde\x58\x34\x95\x06\x47\x42\xe3\x29\xe3\xd6\x35\xb9\xbe\xe9\x2c\xdb\x23\xb7\x4e\xf0\x54\xfb\x84\x59\x78\x4c\xc9\x05\x95\x2b\x5e\x4c\x72\xd8\x3b\xf2\xb6\x71\x29\xf5\x0c\x45\xaf\x62\x07\x0c\x21\x3c\xab\x50\x8a\xb6\x55\x39\xe2\x3f\xbe\x7e\xee\xba\xfd\x08\xe0\xf0\xae\x6d\x2f\xef\xde\xb7\x2d\x69\x4f\x5d\x37\xc6\xda\x36\x02\x99\xac\xeb\x62\x21\xde\x68\xb3\x41\x1c\xaf\x87\xb0\x5f\xbf\x0a\xc5\x55\x26\xc4\x47\xeb\x90\xda\xaa\xd6\x14\x08\xca\x30\xbe\x8b\x34\xac\x41\x69\x9f\x19\x76\xe3\x09\xa1\x54\x7e\xe2\x85\x07\xee\x17\x31\x43\xcc\x80\xc5\xd0\x69\x05\x4f\x84\x7d\x49\x8e\xde\x20\x21\xca\x8c\x8f\x26\x2a\x0f\x6f\x42\xb9\x4e\xde\x20\xbe\x82\x73\xd3\x78\x65\x8a\xab\x3c\x21\x6e\x6e\x70\xf7\x5d\x32\x46\x21\x92\x24\x29\x53\x3d\x8e\x89\xc5\xf5\xce\x16\x58\xcc\x9e\x5a\x01\xc4\x71\x2c\x04\x90\x19\xff\x38\xa9\x84\x03\x98\x38\xf9\x30\x73\x26\xd0\x89\x8e\x9b\x09\xc1\x7b\xe2\xd5\xee\xac\xc9\x55\xd1\xb8\x9e\xde\xf8\xde\x91\x27\x13\xba\x8e\xa7\xdb\xba\xa2\x37\x25\xbe\xb2\x39\xc8\xa4\x74\x91\xe8\x64\x5b\xf9\x92\xe1\x07\x4d\x92\x0a\x25\x39\xd4\xd2\xb3\x38\xa5\x07\x99\x93\x72\xd6\xf4\x65\x4e\xd2\x29\x79\xd4\x6c\x23\xeb\xc4\xe8\xb1\x50\x3a\xdb\x14\x2f\x9b\x4b\xfb\x71\x12\x1c\xb5\x4d\x9f\xd8\x7c\xa1\x24\xb1\x4f\x66\x18\xdf\xd2\xef\x9c\xe5\x48\xba\xe2\x30\x4e\x39\x95\xfb\x6f\x8e\x88\xc1\xb2\xac\xac\x23\x64\x14\xa4\xd2\xbe\x97\x93\xf8\x1f\xe5\xd4\x03\xf8\x81\xa2\x66\x7c\x08\xf1\xc9\x40\x66\x99\xe2\x15\xae\xae\x96\x22\xb5\xb7\xbc\x19\x1f\xac\xa3\x8c\x29\x90\xd0\x36\x95\x1a\xb9\xd2\xb4\x9a\x4c\x53\xcb\x50\x0a\xdf\xd4\xb5\x56\x94\xe1\x78\x46\xff\xff\xcc\x6b\xe6\xf0\x48\xe2\xe4\xb2\xc7\x8f\x9f\x3e\xdf\x25\xf0\x4d\x9e\xab\xef\x31\x1e\x26\x2a\xfe\x06\x8a\x7b\x31\x96\x88\x2e\x8a\x3f\xf0\xf5\x74\xa1\xf2\x95\xbb\x99\x98\x9f\x1f\xfd\x47\x83\x0d\xfa\xea\x8f\xf8\x28\xb7\x2e\x1a\x7c\x10\x8d\xa4\x88\xb6\x75\x92\x8d\x72\xfb\xb4\xc2\xed\x09\x9b\x0f\xd7\x1e\xd8\x39\xca\xc8\x04\x25\xb5\xef\x3a\xb1\xe4\x1b\xf9\xf6\x89\xaf\xe3\x08\x6d\x7b\x7b\xe2\x9b\x6d\xbc\xe4\x7e\x5e\x6d\xfb\xb2\x17\xa9\xff\x4d\x31\x76\xe4\x9d\x39\xfd\x29\xdd\x56\x2b\xfe\xe2\x74\xdd\x95\xe5\x46\x13\x41\x3a\xc2\x72\x39\x7e\x74\x22\x5f\x53\xca\x9c\x2c\x97\x90\x97\xc3\x3d\xc9\xfd\xf2\x8e\xf6\x44\x22\x7d\x3d\x18\x4e\x52\x37\xe4\x37\xe2\x47\x10\xae\x47\x98\xcd\xdd\x17\xef\x4b\x27\x17\x08\xc9\x1c\xc3\xf0\x3b\xbd\x99\x93\xf0\x57\x00\x00\x00\xff\xff\x41\x94\x2c\xf8\x3b\x08\x00\x00")

func templatesDnsProviderDocTemplateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDnsProviderDocTemplateTmpl,
		"templates/dns-provider-doc-template.tmpl",
	)
}

func templatesDnsProviderDocTemplateTmpl() (*asset, error) {
	bytes, err := templatesDnsProviderDocTemplateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dns-provider-doc-template.tmpl", size: 2107, mode: os.FileMode(420), modTime: time.Unix(1606764412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDnsProviderGoTemplateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x8b\xdb\x30\x10\xc5\xef\xfa\x14\xd3\x10\xa8\x03\x59\xf9\xbe\x90\x43\xd8\x64\x7b\x6a\x08\x2c\xe4\x52\x7a\x98\xb5\xc6\x8e\xb0\x3c\x32\x92\xec\x12\x8c\xbe\x7b\x91\x13\xbb\xe9\x9f\x94\x3d\xd9\x33\xd2\x7b\xf3\x7b\xf6\xe4\x39\x6c\xbb\x60\x9f\x2a\x62\x72\x18\x48\x41\xa9\x0d\x49\xd8\x59\x60\x1b\x80\x94\x0e\x52\xb4\x58\xd4\x58\x11\x60\xd1\x90\x10\xba\x69\xad\x0b\x90\x89\xc5\x30\x2c\xe5\xb1\xae\x8e\x18\xce\x31\xe6\xc5\x19\x8d\x21\xae\x68\x21\x86\xe1\x09\x1c\x72\x45\x20\x8f\xce\xf6\x5a\x91\xf3\x31\xfe\x29\x68\xa7\xa3\x5c\xb1\xcf\x87\x41\x7e\xb1\xc7\xba\x8a\xf1\xaa\x27\x56\x31\x8a\x95\x10\x79\x0e\x8a\xfd\xe4\xf3\x8a\x45\xb0\xee\xf2\xda\x71\x01\xda\x03\x42\xd9\x71\x11\xb4\x65\x08\x67\x0c\x50\xa0\x31\xa9\x3b\x79\x7f\xf6\x49\x5f\x58\xf6\xc1\x75\x49\x09\xc8\x0a\x1c\x85\xce\xb1\x87\x70\xa6\xf9\x26\x68\x0e\xe4\x4a\x2c\x48\x8a\x70\x69\xe9\xd1\xd0\x34\x2f\x5b\x41\x36\xc7\x9d\x23\xae\x81\x9c\xb3\xee\x11\xf2\x0d\xf7\x56\x94\x09\xc5\x18\xb0\xe5\x48\xd1\xa3\xd1\x0a\x76\x87\xb7\x99\x67\x04\xf7\x5d\x9b\x3e\x36\x29\x78\xbf\xc0\xf6\xe5\xeb\x7e\x3e\x96\xa2\x47\xf7\xaf\x29\x1b\x68\xb0\xfd\xe6\x83\xd3\x5c\x7d\x7f\x90\x61\xf8\xcf\x1f\x92\x2f\x56\x51\x8c\x8b\xe7\x0f\x24\xbd\x19\xe9\x12\xe4\x9e\xfb\x13\xba\xad\xd1\xe8\x29\x39\x35\xd8\xee\xb9\xd7\xce\x72\x43\x1c\x4e\xe8\x34\xbe\x1b\x3a\xa1\xe9\xc8\x67\x77\x84\xd7\xc7\x3d\xd0\xb2\x5e\xc3\xb2\x87\xe7\xcd\xdf\xa6\x69\x81\xea\x91\x2d\xbd\xf5\x31\x2e\xd6\x77\xbb\x12\x57\x77\x45\x3b\x32\x26\x97\x5f\x8b\x25\x0f\xf4\x63\x77\x78\x9b\x52\x64\x2b\xa1\xcb\xf1\xd6\xa7\x0d\xb0\x36\x30\x88\xeb\x62\xa4\x62\x94\x8b\x28\xa6\x56\xbb\x4e\x5d\x11\x7f\x1b\x28\x7e\x06\x00\x00\xff\xff\x8a\x29\xdb\x58\x3f\x03\x00\x00")

func templatesDnsProviderGoTemplateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDnsProviderGoTemplateTmpl,
		"templates/dns-provider-go-template.tmpl",
	)
}

func templatesDnsProviderGoTemplateTmpl() (*asset, error) {
	bytes, err := templatesDnsProviderGoTemplateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dns-provider-go-template.tmpl", size: 831, mode: os.FileMode(420), modTime: time.Unix(1601656654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dns-provider-doc-template.tmpl": templatesDnsProviderDocTemplateTmpl,
	"templates/dns-provider-go-template.tmpl": templatesDnsProviderGoTemplateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dns-provider-doc-template.tmpl": &bintree{templatesDnsProviderDocTemplateTmpl, map[string]*bintree{}},
		"dns-provider-go-template.tmpl": &bintree{templatesDnsProviderGoTemplateTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

